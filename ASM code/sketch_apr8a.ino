#define BLYNK_TEMPLATE_ID "TMPL6D3Dlca3R"
#define BLYNK_TEMPLATE_NAME "M·ªü c·ª≠a"

#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <BlynkSimpleEsp32.h>
#include <SPI.h>
#include <MFRC522.h>
#include <HTTPClient.h>

// C·∫•u h√¨nh ch√¢n k·∫øt n·ªëi
#define SS_PIN 5
#define RST_PIN 22
#define RELAY_PIN 4
#define BUZZER_PIN 26

// Th√¥ng tin k·∫øt n·ªëi
char auth[] = "j7HH7xWYChMNCImomXi6To9dqnI8qbN8";  // Blynk auth token
char ssid[] = "NhinDauBuoi";  // T√™n WiFi
char pass[] = "longvu10";  // M·∫≠t kh·∫©u WiFi

// Th√¥ng tin Telegram
const String telegramToken = "7983060026:AAGHUh5SqQ3K7DYERDR1sjHAOX9S9LEzAP0";
const String chatID = "7833498338";

MFRC522 rfid(SS_PIN, RST_PIN);
bool buzzerEnabled = false;
std::vector<String> validTags = {"CBF2FB03", "A1B2C3D4"};
int invalidAttempts = 0;
unsigned long lockTime = 0;

void setup() {
  Serial.begin(115200);
  SPI.begin();
  rfid.PCD_Init();

  pinMode(RELAY_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, LOW);
  digitalWrite(BUZZER_PIN, LOW);

  WiFi.begin(ssid, pass);
  Blynk.begin(auth, ssid, pass);

  Serial.println("üöÄ H·ªá th·ªëng s·∫µn s√†ng! H√£y qu·∫πt th·∫ª ƒë·ªÉ m·ªü c·ª≠a.");
}

void loop() {
  Blynk.run();

  if (millis() - lockTime < 10000 && lockTime != 0) {
    Serial.println("‚è≥ H·ªá th·ªëng ƒëang b·ªã kh√≥a, vui l√≤ng ch·ªù...");
    return;
  }
  lockTime = 0;

  if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial()) {
    String rfidTag = "";
    for (byte i = 0; i < rfid.uid.size; i++) {
      rfidTag += (rfid.uid.uidByte[i] < 0x10 ? "0" : "");
      rfidTag += String(rfid.uid.uidByte[i], HEX);
    }

    rfidTag.toUpperCase();
    Serial.println("üîπ ƒê√£ nh·∫≠n th·∫ª: " + rfidTag);

    if (isValidTag(rfidTag)) {
      openDoor();
      invalidAttempts = 0;
    } else {
      invalidTag();
    }

    rfid.PICC_HaltA();
    rfid.PCD_StopCrypto1();
  }
}

void openDoor() {
  Serial.println("‚úÖ C·ª≠a ƒëang m·ªü...");
  digitalWrite(RELAY_PIN, HIGH);
  if (buzzerEnabled) digitalWrite(BUZZER_PIN, HIGH);

  sendTelegramMessage("üîì C·ª≠a ƒë√£ ƒë∆∞·ª£c m·ªü th√†nh c√¥ng!");

  delay(3000);
  digitalWrite(RELAY_PIN, LOW);
  digitalWrite(BUZZER_PIN, LOW);
  Serial.println("üîí C·ª≠a ƒë√£ t·ª± ƒë·ªông kh√≥a l·∫°i.");

  sendTelegramMessage("üîí C·ª≠a ƒë√£ ƒë√≥ng an to√†n.");
}

void invalidTag() {
  Serial.println("‚ùå C·∫£nh b√°o! Th·∫ª kh√¥ng h·ª£p l·ªá.");
  invalidAttempts++;
  sendTelegramMessage("üö® Ph√°t hi·ªán th·∫ª kh√¥ng h·ª£p l·ªá! H√£y ki·ªÉm tra l·∫°i.");

  digitalWrite(BUZZER_PIN, HIGH);
  delay(500);
  digitalWrite(BUZZER_PIN, LOW);

  if (invalidAttempts >= 3) {
    Serial.println("üö´ Qu√° nhi·ªÅu l·∫ßn nh·∫≠p sai! H·ªá th·ªëng b·ªã kh√≥a trong 10 gi√¢y.");
    sendTelegramMessage("‚è≥ H·ªá th·ªëng b·ªã kh√≥a t·∫°m th·ªùi do nh·∫≠p sai qu√° nhi·ªÅu l·∫ßn!");
    lockTime = millis();
    invalidAttempts = 0;
  }
}

bool isValidTag(String tag) {
  for (String validTag : validTags) {
    if (tag == validTag) return true;
  }
  return false;
}

// H√†m m√£ h√≥a URL (message)
String urlEncode(String str) {
  String encoded = "";
  char c;
  char code0, code1;
  for (int i = 0; i < str.length(); i++) {
    c = str.charAt(i);
    if (isalnum(c)) {
      encoded += c;
    } else {
      code0 = (c >> 4) & 0xF;
      code1 = c & 0xF;
      encoded += '%';
      encoded += char(code0 > 9 ? code0 - 10 + 'A' : code0 + '0');
      encoded += char(code1 > 9 ? code1 - 10 + 'A' : code1 + '0');
    }
  }
  return encoded;
}

void sendTelegramMessage(String message) {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚õîÔ∏è Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn do m·∫•t k·∫øt n·ªëi WiFi!");
    return;
  }

  WiFiClientSecure client;
  client.setInsecure();  // B·ªè qua x√°c th·ª±c SSL

  HTTPClient http;
  String encodedMessage = urlEncode(message);
  String url = "https://api.telegram.org/bot" + telegramToken +
               "/sendMessage?chat_id=" + chatID + "&text=" + encodedMessage;

  http.begin(client, url);
  int httpResponseCode = http.GET();

  if (httpResponseCode > 0) {
    Serial.println("üì® ƒê√£ g·ª≠i th√¥ng b√°o: " + message);
  } else {
    Serial.print("‚ö†Ô∏è L·ªói khi g·ª≠i tin nh·∫Øn! M√£ l·ªói: ");
    Serial.println(httpResponseCode);
  }

  http.end();
}

// H√†m b·∫≠t/t·∫Øt c·∫£nh b√°o t·ª´ Blynk (V1)
BLYNK_WRITE(V1) {
  buzzerEnabled = param.asInt();
  Serial.print("üîî Ch·∫ø ƒë·ªô c·∫£nh b√°o: ");
  Serial.println(buzzerEnabled ? "K√çCH HO·∫†T" : "T·∫ÆT");
}

// H√†m m·ªü c·ª≠a t·ª´ Blynk (V0)
BLYNK_WRITE(V0) {
  int doorAction = param.asInt();
  if (doorAction == 1) {
    openDoor();
  }
}
